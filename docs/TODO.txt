
ball will always gradually slow to base speed at pre-defined rate: x factor per frame (explain in Ball docstring)

_angle and _speed in ball should be public (not internal)

fix issue where ball gets stuck in wall

corner bouncing seems to increase speed on paddle/bricks

classes:

Arkanoid
    main class with main_loop

Game
    created when a game is started
    interacts and keeps track of current level, keeps track of number of lives, score
    has update() method called repeatedly by Arkanoid.main_loop()
    has attribute "over" which is checked by main_loop to determine whether to update or throw away
    if not game.over:
        game.update()

Round
    RoundOne
    RoundTwo
    etc.
    creates sprites, background, layout (may need base Round for common logic such as creating sprites - TemplatePattern here perhaps?)
    determines layout, keeps track of active power up
    brought into play when a person starts to play the game. ends when complete, or when lives fall below zero
    the Game keeps track of the Round
    has attribute "complete" which is checked by Game.update() to determine whether to move to next round
    if not round.complete:
        round.update()
    Game keeps track of lives. If lives < 0, then calls round.end() to notify Round to clean up.


Multiple balls could be MultiBall() object switched out with game.ball.

The edges should not be collidable objects, because sometimes the ball when at speed, bounces straight
over them and outside the screen. May not be a problem when they're wider. They could have custom
bounce strategies that handle invalid bouncing and always put the ball back in play.
- or -
the screen left/right/top needs to know when the ball has gone off and put it back in play

Expanding paddle/laser powerup will increase ball speed.

Need better event mechanism.
Possibly create decorator for registering event handlers?  @event_handler
also, @collidable_object(on_collide=arkanoid.game.collision_handler)


The powerups should be more intelligent. Don't drop loads of the same when the powerup is already active?

Use Travis CI

Game events will need to be added to dispatcher when game starts, and removed when game ends.
Currently these are set up in the Paddle sprite, but this won't work because each time a new game (and Paddle sprite)
is created, duplicate event handlers will get added to the dispatcher.

The rounds should not hold a reference to the next rounds.
Round classes should be held in a list (or tuple) at the game level.
When a game is created, we create an "rounds = iter(ROUNDS)" attribute which we call next(rounds) on for each round.